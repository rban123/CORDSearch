'''
    This is a CORD-19 Dataset search tool. It is still in development.
    Ryan Bandler
'''


import os
import json

#this is the path from your current working directory to where the JSON files are hiding
COMM_USE_DIR = "comm_use_subset/comm_use_subset/pdf_json"

#generates a list of all the filenames in a given directory
def getFiles(directory):
    fs = []
    for f in os.walk(COMM_USE_DIR):
        fs.append(f)
    fs = fs[0][2]
    for i in range(len(fs)):
        fs[i] = directory + '/' + fs[i]
    return fs

#generates a .txt file with all the file names.
def exportFilesAsTxt(files, name):
    out = open(name, 'w')
    for f in files:
        out.write(str(f) + '\n')

#populates array from .txt of a file names, generated by above function
#still not functional
def getFilesFromTxt(name):
    files = []
    f = open(name, 'r')
    for file in f:
        files.append(file)
    return files

#returns a tuple of all the abstracts from a given array of files and the length of that array
def getAbstracts(files):
    abstracts = []
    for file in files:
        with open(file) as f:
            try:
                abstr = json.load(f)
                print("loading article: " + str(abstr['paper_id']))
                abstr = abstr['abstract']
                if(len(abstr) > 0):
                    abstracts.append(abstr)
            except:
                print("Exception occured")
    return abstracts

#filters an array of text based on keyword
def simpleFilter(texts, keyword):
    filtered = []
    for f in texts:
        f = str(f)
        if keyword in f:
            filtered.append(f)
    return (filtered, len(filtered))

#this will become a multi search term function
def mstFilter(terms, texts):
    cTexts = texts
    for i in range(len(terms)):
        temp = []
        for j in cTexts:
            sTemp = []
            if terms[i] in j:
                cTexts

#example code
term = input("Enter search term for article abstracts: ")

files = getFiles(COMM_USE_DIR)
abstrs = getAbstracts(files)
filt = simpleFilter(abstrs, term)

for i in filt[0]:
    print(str(i) + '\n\n\n\n')

print("number of results: " + str(filt[1]))
