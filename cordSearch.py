'''
    This is a CORD-19 Dataset search tool. It is still in development.
    Ryan Bandler
'''

import os
import json
import re
from collections import deque
#this is the path from your current working directory to where the JSON files are hiding
COMM_USE_DIR = "comm_use_subset/comm_use_subset/pdf_json"

#generates a list of all the filenames in a given directory
def getFiles(directory):
    fs = []
    for f in os.walk(directory):
        fs.append(f)
    fs = fs[0][2]
    for i in range(len(fs)):
        fs[i] = directory + '/' + fs[i]
    return fs

#generates a .txt file with all the file names.
def exportFilesAsTxt(files, name):
    out = open(name, 'w')
    for f in files:
        out.write(str(f) + '\n')

#populates array from .txt of a file names, generated by above function
def importFilesFromTxt(name):
    files = []
    f = open(name, 'r')
    print("importing files...")
    for line in f:
        files.append(line[:-1])
    return files

#returns all the abstracts from a given array of files
def getAbstracts(files, verbosity="LOW"):
    abstracts = []
    for file in files:
        with open(file) as f:
            try:
                abstr = json.load(f)
                abstr = abstr['abstract']
                if(len(abstr) > 0):
                    abstracts.append(abstr)
            except:
                print("Exception occured")
    return cleanAbstracts(abstracts)

#helper function to extract only clean text from abstracts
def cleanAbstracts(abstrs):
    abstracts = []
    for i in range(len(abstrs)):
        for j in range(len(abstrs[i])):
            abstracts.append(abstrs[i][j]['text'])
    return abstracts

#filters an array of text based on keyword
def simpleFilter(texts, keyword):
    filtered = []
    for f in texts:
        f = str(f)
        if keyword in f:
            filtered.append(f)
    return filtered

#this will become a multi search term function
def andFilter(texts, terms):
    results = simpleFilter(texts, terms[0])
    for i in range(1, len(terms)):
        results = simpleFilter(results, terms[i])
    return results

def orFilter(texts, terms):
    results = []
    found = False
    j = 0
    for i in range(len(texts)):
        while(found == False):
            if(terms[j] in texts[i]):
                result.append(texts[i])
                found = True
                j = 0
            else:
                j += 1
    return results

def toBst()

def displayResults(iterat):
    for i in iterat:
        print(i + '\n\n\n')
    print("Number of results: " + str(len(iterat)))

def expressionParse(texts, expr):
   staq = deque()
   splitExpr = expr.split(' ')

   for i in splitExpr:

       

   while(len(staq) > 0):
       print(staq.pop())

files = getFiles(COMM_USE_DIR)

abstrs = getAbstracts(files)

terms = ['asthma', 'respiratory']
expressionParse(abstrs, terms)

#displayResults(filt)


